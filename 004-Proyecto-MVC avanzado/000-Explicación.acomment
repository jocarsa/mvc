Esta tercera versión del ejercicio representa un concepto muy interesante y podría considerarse como el núcleo principal de esta publicación. En esta ocasión, hemos logrado separar por completo la vista, el modelo y el controlador. En este caso, ubicaremos el modelo de datos en un archivo con la extensión JSON. Dentro de este archivo, no encontraremos ningún formulario ni ningún controlador. Este archivo será exclusivamente responsable de definir la estructura de los datos que se utilizarán a lo largo de la aplicación.

Es importante destacar que el formato JSON se ha elegido simplemente porque es un formato ampliamente utilizado y proporciona todo lo necesario para definir correctamente un modelo de datos. Técnicamente, el modelo de datos podría estar en otros formatos, como XML, un archivo separado por comas o incluso en otros tipos de archivos. Sin embargo, hemos optado por JSON por su facilidad y conveniencia.

Este enfoque de separación completa entre vista, modelo y controlador es fundamental en el desarrollo de aplicaciones siguiendo el patrón Modelo-Vista-Controlador (MVC). Proporciona una estructura más clara y modular que facilita la escalabilidad y el mantenimiento del código.

A continuación, presentamos la vista en la cual hemos utilizado JavaScript en el lado del cliente para realizar una lectura del archivo que contiene el modelo de datos. Luego, dibujamos los campos del formulario estrictamente siguiendo el contenido del modelo de datos que hemos presentado anteriormente. Esto significa que el formulario no se crea de forma estática, sino que se construye dinámicamente en función de la lectura del archivo del modelo de datos.

Esta dinámica introduce una separación fundamental entre el modelo de datos y la vista. El modelo de datos alimenta la vista de manera dinámica, lo que significa que eventualmente podrían haber dos personas diferentes manipulando cada uno de estos dos elementos. Una persona podría encargarse de manipular el modelo de datos, modificando el archivo JSON, mientras que otra persona trabaja en los formularios. Estos formularios se actualizan de manera independiente al archivo del modelo de datos.

Además, algo muy interesante es que en el controlador, el archivo PHP se adapta a los cambios que ocurran en el modelo de datos. Básicamente, el controlador toma todos los datos que provienen del formulario, que constituye la vista, y los convierte en formato JSON. Luego, estos datos se guardan en la base de datos.

Es importante destacar que la vista, en principio, no conoce la estructura del modelo. Cada vez que se ejecuta la vista, esta realiza una lectura en tiempo real del modelo para actualizar los campos del formulario. En cuanto al controlador, a diferencia del ejercicio anterior, este no tiene conocimiento sobre la estructura del modelo. Simplemente toma la información que proviene de la vista (que a su vez ha tomado la información del modelo de datos) y se encarga de persistirla en el disco duro en formato de archivo JSON.

Como mencioné anteriormente, en una versión de producción, probablemente reemplazaríamos el guardado de un archivo JSON en el disco duro con una inserción en una base de datos. Sin embargo, en este caso, hemos implementado de esta manera por razones de facilidad y claridad.